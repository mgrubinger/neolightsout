
// from: https://www.jaapsch.net/puzzles/javascript/lightjcl.htm

    // Javascript written by Jaap Scherphuis. (jaapsch a t yahoo d o t com)

var imagedir="images/lights/";
function preload(){
    this.length=preload.arguments.length;
    for (var i=0;i<this.length;i++){
        this[i]=new Image();
        this[i].src=imagedir+preload.arguments[i];
    }
}

var pics=new preload("lo00.gif","lo10.gif",
                     "lo01.gif","lo11.gif",
                     "lo0.gif","lo1.gif",
                     "../buttons/edit.gif","../buttons/edit2.gif",
                     "../buttons/solve.gif","../buttons/solve2.gif");

var msk;
var moves;
var posit = new Array ();
var hnt = new Array ();
var mode = 0;   //0=normal  1=solving scrambled  2=edit  3=Hint

var qbit=new Array(1,2,4,8,16,32,64,128);
                //Used instead of 1<<x for speed.

var puz=new Array();
puz[ 0]=new Array(0,0,21,0 ,0 );
puz[ 1]=new Array(21,21,0 ,21,21);
puz[ 2]=new Array(10,27,27,27,10);
puz[ 3]=new Array(0 ,27,0 ,17,27);
puz[ 4]=new Array(15,23,23,24,27);
puz[ 5]=new Array(0 ,0 ,21,21,14);
puz[ 6]=new Array(15,17,17,17,15);
puz[ 7]=new Array(0 ,4 ,10,21,10);
puz[ 8]=new Array(10,31,14,26,7 );
puz[ 9]=new Array(14,14,14,0 ,0 );
puz[10]=new Array(21,21,21,21,14);
puz[11]=new Array(31,10,27,14,10);
puz[12]=new Array(8 ,20,10,5 ,2 );
puz[13]=new Array(0 ,0 ,2 ,2 ,2 );
puz[14]=new Array(0 ,2 ,0 ,2 ,0 );
puz[15]=new Array(1 ,1 ,1 ,1 ,31);
puz[16]=new Array(0 ,0 ,4 ,14,31);
puz[17]=new Array(4 ,10,21,10,4 );
puz[18]=new Array(21,0 ,21,0 ,21);
puz[19]=new Array(0 ,0 ,17,0 ,0 );
puz[20]=new Array(30,2 ,14,2 ,2 );
puz[21]=new Array(14,17,17,17,14);
puz[22]=new Array(0 ,0 ,28,12,4 );
puz[23]=new Array(0 ,0 ,17,31,18);
puz[24]=new Array(1 ,3 ,7 ,15,30);
puz[25]=new Array(17,17,31,17,17);
puz[26]=new Array(4 ,14,4 ,4 ,4 );
puz[27]=new Array(0 ,0 ,28,28,28);
puz[28]=new Array(0 ,2 ,0 ,0 ,0 );
puz[29]=new Array(0 ,0 ,4 ,0 ,0 );
puz[30]=new Array(17,19,21,25,17);
puz[31]=new Array(31,8 ,4 ,2 ,31);
puz[32]=new Array(8 ,8 ,21,17,25);
puz[33]=new Array(20,17,17,22,30);
puz[34]=new Array(24,10,17,21,0 );
puz[35]=new Array(4 ,10,17,31,17);
puz[36]=new Array(0 ,14,14,14,0 );
puz[37]=new Array(21,10,21,10,21);
puz[38]=new Array(10,1 ,3 ,12,10);
puz[39]=new Array(0 ,0 ,10,0 ,0 );
puz[40]=new Array(17,10,4 ,4 ,4 );
puz[41]=new Array(7 ,9 ,7 ,9 ,7 );
puz[42]=new Array(17,11,7 ,2 ,14);
puz[43]=new Array(0 ,27,31,4 ,14);
puz[44]=new Array(14,5 ,28,15,21);
puz[45]=new Array(4 ,14,31,14,4 );
puz[46]=new Array(4 ,31,5 ,18,16);
puz[47]=new Array(0 ,17,4 ,17,0 );
puz[48]=new Array(17,10,4 ,10,17);
puz[49]=new Array(31,31,31,31,31);
puz[50]=new Array(27,0 ,27,0 ,27);
puz[51]=new Array(31,4 ,0 ,4 ,31);
puz[52]=new Array(31,10,4 ,10,31);
puz[53]=new Array(10,17,0 ,27,17);
puz[54]=new Array(4 ,6 ,27,12,4 );
puz[55]=new Array(10,31,21,31,10);
puz[56]=new Array(21,17,27,17,21);
puz[57]=new Array(0 ,0 ,14,2 ,0 );
puz[58]=new Array(16,8 ,4 ,6 ,5 );
puz[59]=new Array(0 ,21,17,21,17);
puz[60]=new Array(31,14,14,14,31);
puz[61]=new Array(17,10,0 ,10,17);
puz[62]=new Array(14,10,14,8 ,14);
puz[63]=new Array(15,9 ,15,7 ,9 );
puz[64]=new Array(21,21,21,21,14);
puz[65]=new Array(14,2 ,14,8 ,14);
puz[66]=new Array(31,17,21,17,31);
puz[67]=new Array(21,0 ,21,0 ,21);
puz[68]=new Array(10,21,14,21,10);
puz[69]=new Array(21,0 ,0 ,0 ,21);
puz[70]=new Array(31,29,27,23,31);
puz[71]=new Array(31,4 ,31,17,17);
puz[72]=new Array(27,10,27,10,27);
puz[73]=new Array(4 ,10,31,17,31);
puz[74]=new Array(17,27,21,17,17);
puz[75]=new Array(31,21,31,21,31);
puz[76]=new Array(14,4 ,4 ,4 ,14);
puz[77]=new Array(14,10,31,14,27);
puz[78]=new Array(0 ,0 ,4 ,0 ,0 );
puz[79]=new Array(17,0 ,4 ,0 ,17);
puz[80]=new Array(27,27,0 ,27,27);
puz[81]=new Array(10,0 ,17,14,4 );
puz[82]=new Array(21,14,27,14,21);
puz[83]=new Array(17,19,21,25,17);
puz[84]=new Array(21,21,27,21,21);
puz[85]=new Array(4 ,4 ,14,21,21);
puz[86]=new Array(21,21,21,21,31);
puz[87]=new Array(0 ,14,14,14,0 );
puz[88]=new Array(4 ,10,17,31,17);
puz[89]=new Array(21,10,21,10,21);
puz[90]=new Array(17,14,10,14,17);
puz[91]=new Array(4 ,10,17,10,4 );
puz[92]=new Array(21,0 ,10,0 ,21);
puz[93]=new Array(10,31,10,31,10);
puz[94]=new Array(31,21,31,29,31);
puz[95]=new Array(17,10,4 ,10,17);
puz[96]=new Array(31,4 ,31,4 ,31);
puz[97]=new Array(31,14,4 ,14,31);
puz[98]=new Array(4 ,21,31,21,4 );
puz[99]=new Array(31,31,31,31,31);

document.writeln("<table cellpadding=0 cellspacing=0 border=0>");
document.write("<tr><td colspan=7 align=center>");
document.writeln("<form name=puzform>Puzzle:");
document.writeln("<select name=puzzle size=1 onChange='initpuz(this.selectedIndex); return false;'>");
document.writeln("<option>---");
for( var b=1;b<=2;b++){
    for( var a=1;a<=25;a++){
        document.writeln("<option>Set "+b+" Puzzle "+a);
    }
}
for( var b=1;b<=2;b++){
    for( var a=1;a<=25;a++){
        document.writeln("<option>Lo2000 "+b+" Puz "+a);
    }
}
document.writeln("<\/select><\/form><\/td><\/tr>");
document.write("<tr><td colspan=7>");
  document.write("<a href='javascript:void hint();'><img src='images/buttons/solve.gif' height=16 width=48 border=0 name='hint'><\/a>");
  document.write("<a href='javascript:void mix();'><img src='images/buttons/mix.gif' height=16 width=48 border=0><\/a>");
  document.write("<a href='javascript:void reset();'><img src='images/buttons/reset.gif' height=16 width=48 border=0><\/a>");
  document.write("<a href='javascript:void edit();'><img src='images/buttons/edit.gif' height=16 width=48 border=0 name='edit'><\/a>");
  document.write("<a href='javascript:void help();'><img src='images/buttons/help.gif' height=16 width=48 border=0><\/a>");
  document.writeln("<\/td><\/tr>");

for(var i=1;i<=5;i++){
    document.writeln("<tr><td width=50><\/td>");
    for(var j=1;j<=5;j++){
        document.writeln("  <td><a href='javascript:void clicked("+i+","+j+");'>"+
            "<img src='"+pics[4].src+"' height=28 width=28 "+
            "name='brd"+i+""+j+"' border=0><\/a><\/td>");
    }
    document.writeln("<td width=50><\/td><\/tr>");
}
document.writeln("<\/table>");

function initbrd(){
    for(var i=0;i<=6;i++) { posit[i]=0; hnt[i]=0; }
    moves=0;
    showbrd();
    msk=qbit[6]-2;
}
function help(){
    alert("Lights-Out Help\n\nAim: Press the buttons to turn off the lights.\n"
        +"Other controls:\n"
        +"Solve: Show shortest solution.\n"
        +"Mix:   Randomly mix up the board.\n"
        +"Reset: Clear the board.\n"
        +"Edit:  Go to edit mode. Allows you to set up a position to solve. Press Edit again when finished.\n"
        +"Puzzle: Select one of the 50 built-in puzzles.\n"
        );
}
function initpuz(p){
    if(p){
        for(var i=1;i<=5;i++){
            posit[i]=2*puz[p-1][i-1];
            hnt[i]=0;
        }
        moves=0;
        mode=1;
        showbrd();
    }
}
function draw(y,x){
    var c=0;
    if(x>=1 && y>=1 && y<=5 && x<=5){
        if(posit[y]&qbit[x]) c=1;
        if(mode==3){
            if(hnt[y]&qbit[x]) c+=2;
        }else c+=4;
        document.images["brd"+y+""+x].src=pics[c].src;
    }
}
function showbrd(){
    //rewrites all images. on screen.
    for(var i=1;i<=5;i++) {
        var k=2;
        for(var j=1;j<=5;j++) {
            var c=0
            if(posit[i]&k) c=1;
            if(mode==3){
                if(hnt[i]&k) c+=2;
            }else c+=4;
            document.images["brd"+i+""+j].src=pics[c].src;
            k+=k;
        }
    }
    if(mode==2) document.images["edit"].src=pics[7].src;
    else document.images["edit"].src=pics[6].src;
    if(mode==3) document.images["hint"].src=pics[9].src;
    else document.images["hint"].src=pics[8].src;
}
function onResize(){
    showbrd();
}

initbrd();

function reset(){
    //clear board
    mode=0;
    initbrd();
}
function domove(y,x,k){
    //Do proper move. Update screen if k set
    posit[y]^=qbit[x+2]-qbit[x-1];
    posit[y-1]^=qbit[x];
    posit[y+1]^=qbit[x];
    if(mode==2) hnt[y]^=qbit[x];
    if(k) {
        //update only relevant cells
        draw(y,x);
        draw(y-1,x);
        draw(y+1,x);
        draw(y,x-1);
        draw(y,x+1);
    }
}
function clicked(y,x){
    //clicked on cell (y,x)
    if(mode==2){
        //editing, so just toggle one light
        posit[y]^=qbit[x]; draw(y,x);
    }else{
        //Do normal move
        if(mode==3) hnt[y]^=qbit[x];  //toggle hint marker
        domove(y,x,1);
        moves++;
        if(mode==1 && solved()){
            alert("You solved it in "+moves+" moves.\nYou don't get a prize for this though!");
            mode=0;
        }
    }
    this.focus();
}
function solved(){
    //Check if board is solved
    for(var i=1;i<=5;i++){
        if(posit[i]&msk) return(false);
    }
    return(true);
}

function mix(){
    //set up random position.
    initbrd();
    for(var i=1;i<=5;i++){
        var d=2*Math.floor(Math.random()*qbit[5]);
        //perform random button pattern d on current row
        posit[i]^=d^(d+d)^(d>>1);
        posit[i+1]^=d;
        posit[i-1]^=d;
    }
    mode=1;
    moves=0;
    showbrd();
}


function edit(){
    // Edit button clicked
    if(mode==2) {
        // end editing should check for solubility
        if(hintson()){
            mode=1;
            showbrd();
        }else alert("This position cannot be solved!");
    }else {
        //start editing
        mode=2;
        showbrd();
    }
}

function hint(){
    //hint button clicked
    if(mode==3) {
        // switch off hints
        mode=0;
        showbrd();
    }else if(mode!=2){
        //switch hints on
        if(hintson()) mode=3;
        showbrd();
    }
}

function solvbot(f){
    // solve board till bottom row. If f set then adjust hnt accordingly
    for(i=2;i<=5;i++){
        var c=posit[i-1]&msk;
        posit[i]^=c^(c+c)^(c>>1);
        posit[i+1]^=c;
        posit[i-1]=0;
        if(f) hnt[i]^=c;
    }

}
function hintson(){
    //Find solution, and put it into hnt array
    //Board remains unchanged.
    //If no solution found, then return false, else return true

    //backup board, and set board to accept hints
    var backup = new Array();
    for(var i=0;i<=5;i++) backup[i]=posit[i];
    for(var i=1;i<=5;i++) hnt[i]=0;

    //solve board up to last row
    solvbot(1);

    //save bottom row vector
    var aim = posit[5];
    posit[5]=0;

    //Build up matrix of bottom rows for each possible top light
    var bot = new Array (34,20,56,0, 0 );
    var inv = new Array (6, 14,12,54,42)

    //Note rows below l are 0, i.e. push patterns that have no effect.
    //Now try to make aim from non-zero rows
    m=0; //current row
    for(var k=1;k<=5;k++){   //current column
        var c=qbit[k];
        if(bot[m]&c){
            if(aim&c){
                aim^=bot[m];
                //push top buttons as indicated in inv matrix
                var d=inv[m];
                hnt[1]^=d;
                posit[1]=(posit[1]^d^(d+d)^(d>>1))&msk;
                posit[2]^=d;
            }
            m++; //move to next row
        }
    }
    //Error if aim has not been attained
    if(aim&msk){
        //restore board
        for(i=0;i<=5;i++) posit[i]=backup[i];
        return(false);
    }
    //Expand solution
    solvbot(1);

    //Should now check whether can minimise solution by adding a zero row
    aim=counthnt();
    //save current position
    var backhnt=new Array;
    for(var i=1;i<=5;i++) backhnt[i]=hnt[i];

    //get complete push pattern generators
    var invar= new Array();
    invar[0]=new Array(54,0,54,0,54);
    invar[1]=new Array(42,42,0,42,42);
    invar[2]=new Array(28,42,54,42,28);

    //run through all non-zero combinations of the push patterns.
    for(c=0;c<=2;c++){
        //check combination c; each bit indicates one of the final rows to add
        for(var i=1;i<=5;i++) hnt[i]=backhnt[i]^invar[c][i-1];
        //check if found better solution
        j=counthnt();
        //alert("aim="+aim+" new="+j+"\nold="+backhnt+"\nhnt="+hnt);
        if(j<aim){
            for(var i=1;i<=5;i++) backhnt[i]=hnt[i];
            aim=j;
        }
    }
    //restore hnt
    for(var i=1;i<=5;i++) hnt[i]=backhnt[i];

    //restore board
    for(i=1;i<=5;i++) posit[i]=backup[i];
    return(true);
}


//used to quickly count number of bits set.
var qcnt=new Array(0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
                     1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5);
function counthnt(){
    //count number of buttons pressed, i.e. number of bits set in hnt.
    var c=0;
    for(var i=1;i<=5;i++){
        c+=qcnt[hnt[i]>>1]+qcnt[hnt[i]>>6];
    }
    return(c);
}